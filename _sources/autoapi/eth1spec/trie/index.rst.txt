:mod:`eth1spec.trie`
====================

.. py:module:: eth1spec.trie

State Trie
^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

The state trie is the structure responsible for storing
`eth1spec.eth_types.Account` objects.





.. data:: debug
   :annotation: = False





.. data:: verbose
   :annotation: = False



Hex prefix encoding.

:param x: Array of values less than 16.
:type x: `eth1spec.eth_types.Bytes`
:param t: Any of `0`, `1`, `False`, or `True`.
:type t: `Union[bool, int]`

:returns: **encoded** -- TODO
:rtype: `bytearray`


.. function:: HP(x: eth1spec.base_types.Bytes, t: Union[bool, int]) -> bytearray
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 26-56

Encodes `t` as a bit flag.

:param t: Arbitrary boolean.
:type t: `Union[bool, int]`

:returns: **flag** -- `t` encoded as a bit flag.
:rtype: `int`


.. function:: f(t: Union[bool, int]) -> int
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 59-76

Hex prefix decoding.

:param buffer: TODO
:type buffer: `Bytes`

:returns: * **nibbles** (`str`) -- Decoded prefix
          * **t** (`bool`) -- TODO


.. function:: HP_inverse(buffer: eth1spec.base_types.Bytes) -> Tuple[str, bool]
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 79-102



.. data:: T
   



TODO

:param J: TODO
:type J: `Dict[Bytes, Bytes]`
:param secured: Denotes whether the keys should be hashed. Defaults to `true`.
:type secured: `bool`

:returns:
:rtype: TODO


.. function:: y(J: Mapping[eth1spec.base_types.Bytes, T], secured: bool = True) -> Mapping[eth1spec.base_types.Bytes64, T]
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 108-138

Computes the root hash of the storage trie.

:param J: TODO
:type J: `Mapping[Bytes, Union[Bytes, Account, Receipt, Uint, U256]]`

:returns: **root** -- TODO
:rtype: `eth1spec.eth_types.Root`


.. function:: TRIE(J: Mapping[eth1spec.base_types.Bytes, Union[eth1spec.eth_types.Account, eth1spec.base_types.Bytes, eth1spec.eth_types.Receipt, eth1spec.base_types.Uint, eth1spec.base_types.U256]]) -> eth1spec.eth_types.Root
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 141-159

Node composition function.

:param J: TODO
:type J: `Mapping[Bytes, Union[Bytes, Account, Receipt, Uint, U256]]`
:param i: TODO
:type i: `eth1spec.eth_types.U256`

:returns: **hash** -- TODO
:rtype: `eth1spec.eth_types.Hash32`


.. function:: n(J: Mapping[eth1spec.base_types.Bytes, Union[eth1spec.base_types.Bytes, eth1spec.eth_types.Account, eth1spec.eth_types.Receipt, eth1spec.base_types.Uint, eth1spec.base_types.U256]], i: eth1spec.base_types.U256) -> eth1spec.base_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 162-188

Structural composition function.

Used to patricialize and merkleize a dictionary. Includes memoization of
the tree structure and hashes.

:param J: TODO
:type J: `Mapping[Bytes, Union[Bytes, Account, Receipt, Uint, U256]]`
:param i: TODO
:type i: `eth1spec.base_types.Uint`

:returns: **value** -- TODO
:rtype: `eth1spec.eth_types.Bytes`


.. function:: c(J: Mapping[eth1spec.base_types.Bytes, Union[eth1spec.base_types.Bytes, eth1spec.eth_types.Account, eth1spec.eth_types.Receipt, eth1spec.base_types.Uint, eth1spec.base_types.U256]], i: eth1spec.base_types.U256) -> eth1spec.base_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/trie.py
   :language: python
   :lines: 191-306
