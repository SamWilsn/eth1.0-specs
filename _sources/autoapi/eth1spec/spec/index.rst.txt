:mod:`eth1spec.spec`
====================

.. py:module:: eth1spec.spec

Ethereum Specification
^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Entry point for the Ethereum specification.





.. data:: BLOCK_REWARD
   



History and current state of the block chain.


.. class:: BlockChain

   .. attribute:: blocks


   .. attribute:: state




Attempts to apply a block to an existing block chain.

:param chain: History and current state.
:type chain: `eth1spec.eth_types.BlockChain`
:param block: Block to apply to `chain`.
:type block: `eth1spec.eth_types.Block`


.. function:: state_transition(chain: BlockChain, block: eth1spec.eth_types.Block) -> None
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 50-75

Verifies a block header.

:param header: Header to check for correctness.
:type header: `eth1spec.eth_types.Header`

:returns: **verified** -- True if the header is correct, False otherwise.
:rtype: `bool`


.. function:: verify_header(header: eth1spec.eth_types.Header) -> bool
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 78-92

Executes a block.

:param state: Current account state.
:type state: `eth1spec.eth_types.State`
:param coinbase: Address of account which receives block reward and transaction fees.
:type coinbase: `eth1spec.eth_types.Address`
:param block_number: Position of the block within the chain.
:type block_number: `eth1spec.base_types.Uint`
:param block_gas_limit: Initial amount of gas available for execution in this block.
:type block_gas_limit: `eth1spec.base_types.Uint`
:param block_time: Time the block was produced, measured in seconds since the epoch.
:type block_time: `eth1spec.base_types.U256`
:param block_difficulty: Difficulty of the block.
:type block_difficulty: `eth1spec.base_types.Uint`
:param transactions: Transactions included in the block.
:type transactions: `List[eth1spec.eth_types.Transaction]`
:param ommers: Headers of ancestor blocks which are not direct parents (formerly
               uncles.)
:type ommers: `List[eth1spec.eth_types.Header]`

:returns: * **gas_available** (`eth1spec.base_types.Uint`) -- Remaining gas after all transactions have been executed.
          * **root** (`eth1spec.eth_types.Root`) -- State root after all transactions have been executed.
          * **state** (`eth1spec.eth_types.State`) -- State after all transactions have been executed.


.. function:: apply_body(state: eth1spec.eth_types.State, coinbase: eth1spec.eth_types.Address, block_number: eth1spec.base_types.Uint, block_gas_limit: eth1spec.base_types.Uint, block_time: eth1spec.base_types.U256, block_difficulty: eth1spec.base_types.Uint, transactions: List[eth1spec.eth_types.Transaction], ommers: List[eth1spec.eth_types.Header]) -> Tuple[eth1spec.base_types.Uint, eth1spec.eth_types.Root, eth1spec.eth_types.State]
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 95-178

Execute a transaction against the provided environment.

:param env: Environment for the Ethereum Virtual Machine.
:type env: `eth1spec.evm.Environment`
:param tx: Transaction to execute.
:type tx: `eth1spec.eth_types.Transaction`

:returns: * **gas_left** (`eth1spec.base_types.U256`) -- Remaining gas after execution.
          * **logs** (`List[eth1spec.eth_types.Log]`) -- Logs generated during execution.


.. function:: process_transaction(env: eth1spec.evm.Environment, tx: eth1spec.eth_types.Transaction) -> Tuple[eth1spec.base_types.U256, List[eth1spec.eth_types.Log]]
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 181-226

Verifies a transaction.

:param tx: Transaction to verify.
:type tx: `eth1spec.eth_types.Transaction`

:returns: **verified** -- True if the transaction can be executed, or False otherwise.
:rtype: `bool`


.. function:: verify_transaction(tx: eth1spec.eth_types.Transaction) -> bool
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 229-243

Calculates the intrinsic cost of the transaction that is charged before
execution is instantiated.

:param tx: Transaction to compute the intrinsic cost of.
:type tx: `eth1spec.eth_types.Transaction`

:returns: **verified** -- The intrinsic cost of the transaction.
:rtype: `eth1spec.base_types.Uint`


.. function:: intrinsic_cost(tx: eth1spec.eth_types.Transaction) -> eth1spec.base_types.Uint
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 246-269

Extracts the sender address from a transaction.

:param tx: Transaction of interest.
:type tx: `eth1spec.eth_types.Transaction`

:returns: **sender** -- The address of the account that signed the transaction.
:rtype: `eth1spec.eth_types.Address`


.. function:: recover_sender(tx: eth1spec.eth_types.Transaction) -> eth1spec.eth_types.Address
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 272-302

Compute the hash of a transaction used in the signature.

:param tx: Transaction of interest.
:type tx: `eth1spec.eth_types.Transaction`

:returns: **hash** -- Hash of the transaction.
:rtype: `eth1spec.eth_types.Hash32`


.. function:: signing_hash(tx: eth1spec.eth_types.Transaction) -> eth1spec.eth_types.Hash32
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 305-327

Pretty prints the state.

:param state: Ethereum state.
:type state: `eth1spec.eth_types.State`


.. function:: print_state(state: eth1spec.eth_types.State) -> None
   :noindexentry:




.. literalinclude:: /../src/eth1spec/spec.py
   :language: python
   :lines: 333-354
