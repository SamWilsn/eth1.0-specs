:mod:`eth1spec.crypto`
======================

.. py:module:: eth1spec.crypto

Cryptographic Functions
^^^^^^^^^^^^^^^^^^^^^^^

..contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Cryptographic primatives used in—but not defined by—the Ethereum specification.



Computes the keccak256 hash of the input `buffer`.

:param buffer: Input for the hashing function.
:type buffer: `eth1spec.eth_types.Bytes`

:returns: **hash** -- Output of the hash function.
:rtype: `eth1spec.eth_types.Hash32`


.. function:: keccak256(buffer: eth1spec.base_types.Bytes) -> eth1spec.eth_types.Hash32
   :noindexentry:




.. literalinclude:: /../src/eth1spec/crypto.py
   :language: python
   :lines: 22-36

Computes the keccak512 hash of the input `buffer`.

:param buffer: Input for the hashing function.
:type buffer: `eth1spec.eth_types.Bytes`

:returns: **hash** -- Output of the hash function.
:rtype: `eth1spec.eth_types.Hash32`


.. function:: keccak512(buffer: eth1spec.base_types.Bytes) -> eth1spec.eth_types.Hash64
   :noindexentry:




.. literalinclude:: /../src/eth1spec/crypto.py
   :language: python
   :lines: 39-53

Recovers the public key from a given signature.

:param r: TODO
:type r: `eth1spec.base_types.Uint`
:param s: TODO
:type s: `eth1spec.base_types.Uint`
:param v: TODO
:type v: `eth1spec.base_types.Uint`
:param msg_hash: Hash of the message being recovered.
:type msg_hash: `eth1spec.eth_types.Hash32`

:returns: **public_key** -- Recovered public key.
:rtype: `eth1spec.eth_types.Bytes`


.. function:: secp256k1_recover(r: eth1spec.base_types.U256, s: eth1spec.base_types.U256, v: eth1spec.base_types.U256, msg_hash: eth1spec.eth_types.Hash32) -> eth1spec.base_types.Bytes
   :noindexentry:




.. literalinclude:: /../src/eth1spec/crypto.py
   :language: python
   :lines: 56-87
